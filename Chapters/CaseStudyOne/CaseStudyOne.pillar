!! Most of Spec20 in one Example

In this chapter we will guide you over the building of a simple but not trivial 
application to manage films as shown in Figure *@FullApp*.
We will show many aspects of Spec20 that we will revisit in depth in the rest of this book:
application, presenter, separation between domain and model, layout, transmission to connect widget and styles. 


+Film App: reusing the same component to edit and browsing a film.>file://figures/FullApp.png|width=90|label=FullApp+

!!! Application
Spec20 introduces the concept of an application. An ''application'' is small object responsible to keep the state the your application. It manages for example, the multiple windows that can compose your application, its back-end, and can hold properties shared by the application. 

We start to define an application as follows: 

[[[language=Smalltalk
SpApplication subclass: #ImdbApplication
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Spec2-TutorialOne'
]]]

In this example, we will show how we define which back-end to use and this will allow us to switch between Morphic and GTK.

!!! A Basic Model

Since we will manage films we define a ==Film== class as follows: It has a name, a year and a director. We generate the companion accessors.

[[[language=Smalltalk
Object subclass: #ImdbFilm
	instanceVariableNames: 'name year director'
	classVariableNames: ''
	package: 'Spec2-TutorialOne'
]]]

We need to have a way to store and query some films. 
We could use Voyage since it works without an external Mongo DB. 
But we want to keep it extremely simple.
So define a kind of singleton (one of the most misunderstood and ugliest Design Pattern so burn your computer once
you will coded it).

We define a class instance variable called ==films==.

[[[language=Smalltalk
ImdbFilm class
	instanceVariableNames: 'films'
]]]

We define a method that lazy initialize the ==films== variable to an ordered collection.

[[[language=Smalltalk
ImdbFilm class >> films

	^ films ifNil: [ films := OrderedCollection new ]
]]]

And to finish we define a way to add a film to the list.

[[[language=Smalltalk
ImdbFilm class >> addFilm: aFilm
	films add: aFilm
]]]

Now we are ready to define a first presenter that will manage a list of films.

!!!List of Films
We define a presenter to manage a list of films.
For this we define a new class named ==ImdbFilmListPresenter== which inherits from ==SpPresenter==.
We add an instance variable named ==filmList== that will hold an elementary list presenter. 
Its means that ==ImdbFilmListPresenter== can have multiple subpresenter. 

[[[language=Smalltalk
SpPresenter subclass: #ImdbFilmListPresenter
	instanceVariableNames: 'filmList'
	classVariableNames: ''
	package: 'Spec2-TutorialOne'
]]]

We define how the information should be presented by defining a class method named ==defaultLayout==. 
Here we define a simple layout: a list of boxes displayed vertically.
We are declaring that inside this box layout there is a specific presenter for the list itself and it is named ==filmList==.

!!!! defaultLayout
[[[language=Smalltalk
ImdbFilmListPresenter class >> defaultLayout

	^ SpBoxLayout newVertical
			add: #filmList; 
			yourself
]]]

When you do not define any other methods to represent layout, ==defaultLayout== is the method that is invoked by Spec logic. 
We saw that a presenter can have subpresenters and you will see later that (1) a presenter can have multiple layouts, (2) that we can define instance level layouts to get more dynamic situations.

!!!! initializePresenters
So far we did not explain what ==filmList== was. 
In fact ==filmList== a variable is another elementary presenter (here already existing in Spec20).
We define how we set the presenter for the ==filmList==.
Here the message ==newTable== instantiate a ==SpTablePresenter==.

In fact the list is more table than a mere list: we describe that we want three columns as follows: 

[[[language=Smalltalk
ImdbFilmListPresenter >> initializePresenters

	filmList := self newTable
		addColumn: (SpStringTableColumn title: 'Name' evaluated: #name);
		addColumn: (SpStringTableColumn title: 'Director' evaluated: #director);
		addColumn: (SpStringTableColumn title: 'Year' evaluated: #year);
		yourself.
		
	self updatePresenter
]]]

The last message ==updatePresenter== just query the domain (==ImdbFilm==) to get the list of the recorded films
and populate the internal table with them.

[[[language=Smalltalk
ImdbFilmListPresenter >> updatePresenter
	
	filmList items: ImdbFilm films
]]]

The following expression creates an instance of the film list presenter and open it. You get the widget shown in Figure *@LayoutInitilalizePresenters*.

%ImdbFilmListPresenter0 new openWithSpec
[[[language=Smalltalk
ImdbFilmListPresenter new openWithSpec
]]]

+A layout and initializePresenters.>file://figures/FilmList-01-LayoutInitilalizePresenters.png|width=60|label=LayoutInitilalizePresenters+

!!! Opening Presenters 

While directly accessing a presenter to create is possible during development,
a more canonical way to create a presenter is to ask the application using the message ==newPresenter:== as follows.

[[[language=Smalltalk
| app |
app := ImdbApplication new. 
(app newPresenter: ImdbFilmListPresenter) openWithSpec.
]]]

The application is responsible for managing windows and other information, therefore it is important to use it to create presenters that compose the application. 




!!! Improving Window
A presenter can be embedded in another presenter as we will show later. It can be also placed within a window and this is what the message ==openWithSpec== is doing. 
Spec offers another hook to specialize the information presented when a presenter is displayed within a window. 

The method ==initializeWindow:== defines a title, a default size (message ==initialExtent==) and a toolbar. You should obtain the window with a tool bar as shown in Figure *@FilmListPresenter2*.
 

[[[language=Smalltalk
ImdbFilmListPresenter >> initializeWindow: aWindowPresenter

	aWindowPresenter 
		title: 'Mini IMDB';
		initialExtent: 600@400;
		toolBar: (self newToolBar
						addItem: (self newToolBarButton 
										label: 'Add film' ;
										icon: (self application iconNamed: #smallAdd);
										action: [ self addFilm ];
										yourself);
									yourself)
]]]

To make sure that the button does not raise an error we define an empty ==addFilm==.
In fact we will define a different presenter to be able to define a film. 

[[[language=Smalltalk
ImdbFilmListPresenter >> addFilm
	"empty for now"
]]]

As we will see with the Commander2 chapter, toolbars can be automatically created out of commands.

We could have added the toolbar in a similar way than the ==filmList== as part of the ==ImdbFilmListPresenter== because the toolbar is also a presenter (similar to the table presenter or other predefined presenters). But doing this way is less modular.
Note also that the toolbar we created could be factored in a separate class to increase reuse too.


+Film list presenter.>file://figures/FilmList-02-initalizeWindows.png|width=60|label=FilmListPresenter2+


!!! An Application Manages Icons

What we can see from the definition of the method ==initializeWindow:== is that an application manages also icons via the message ==iconNamed:==. 
It means that your application can use its own icon set using the method ==iconManager:==. 


!!! Film Itself

We are ready to define a simple presenter to edit a film. We will use it to add new film or simply display it.
We create a new subclass of ==SpPresenter== named ==ImdbFilmPresenter==.
This class has three instance variables: ==nameText==, ==directorText==, and ==yearNumber==.

[[[language=Smalltalk
SpPresenter subclass: #ImdbFilmPresenter
	instanceVariableNames: 'nameText directorText yearNumber'
	classVariableNames: ''
	package: 'Spec2-TutorialOne'
]]]



As we did previously, we define a default layout. 
This time we just use a grid layout. With a simple grid layout you can define the position in the grid where your elements will appear. 

[[[language=Smalltalk
ImdbFilmPresenter class >> defaultLayout 
	^ SpGridLayout new 
			add: 'Name' at: 1@1; add: #nameText at: 2@1;
			add: 'Director' at: 1@2; add: #directorText at: 2@2;
			add: 'Year' at: 1@3; add: #yearNumber at: 2@3;
			yourself
]]]

Note that it is not required to create the accessors for the presenter elements as we were forced to do it in Spec1.0.
Here we create them because we will need to access to them when creating the corresponding ==ImdbFilm== instance.


And similarly as before, we define the method ==initializePresenters== to initialize the variables to the corresponding elementary presenters. 
Here the ==nameText== and ==directorTest== are initialized to a textInput, and ==yearNumber== is a numberInput

[[[language=Smalltalk
ImdbFilmPresenter >> initializePresenters

	nameText := self newTextInput.
	directorText := self newTextInput.
	yearNumber := self newNumberInput 
				rangeMinimum: 1900 
				maximum:  Year current year
]]]

[[[language=Smalltalk
| app |
app := ImdbApplication new. 
(app newPresenter: ImdbFilmPresenter) openWithSpec.
]]]

%ImdbFilmPresenter0
+Single Film presenter.>file://figures/FilmList-03-OpenFilmPresenter.png|width=60|label=FilmPresenter1+





[[[language=Smalltalk
ImdbFilmPresenter class >> defaultLayout
	^ SpGridLayout new
		beRowNotHomogeneous;
		beColumnNotHomogeneous;
		column:2  withConstraints: #beExpand;
		add: 'Name' at: 1 @ 1; add: #nameText at: 2 @ 1;
		add: 'Director' at: 1 @ 2; add: #directorText at: 2 @ 2;
		add: 'Year' at: 1 @ 3; add: #yearNumber at: 2 @ 3;
		yourself
]]]

%ImdbFilmPresenter1
+Using the non homogenous.>file://figures/FilmList-04-OpenFilmPresenter-2.png|width=60|label=FilmListPresenter2+

[[[language=Smalltalk
ImdbFilmPresenter >> initializeWindow: aWindowPresenter
	aWindowPresenter
		title: 'Film';
		initialExtent: 400 @ 250
]]]


!!! Invoking a Presenter

We can define the method ==addFilm== in the class ==ImdbFilmListPresenter==. 
When the user clicks on the button, we create a new film presenter that we associate with the current application. 
We open such presenter as a modal dialog. 
When the user press the Ok button (that we have customized in Figure *@FilmListPresenter3*), we add a new film
to our little database and we update the list as shown in Figure *@refreshed*.

[[[language=Smalltalk
ImdbFilmListPresenter >> addFilm
	| dialog windowPresenter |
	dialog := ImdbFilmPresenter newApplication: self application.
	windowPresenter := dialog openModalWithSpec.
	windowPresenter isOk
		ifFalse: [ ^ self ].
	ImdbFilm
		addFilm:
			(ImdbFilm new
				name: dialog nameText text;
				director: dialog director text;
				year: dialog yearNumber number).
	self updatePresenter
]]]




!!! Better looking Film Presenter
We improve the look of the the film presenter by adding the following new ==initializeWindow:== method (See Figure *@FilmListPresenter3*).

[[[language=Smalltalk
ImdbFilmPresenter >> initializeWindow: aWindowPresenter
	aWindowPresenter
		title: 'Film';
		initialExtent: 400 @ 250
]]]

+Better window.>file://figures/FilmPresenter3.png|width=60|label=FilmListPresenter3+

!!! Customizing the Modal Dialog


[[[language=Smalltalk
ImdbFilmPresenter >> initializeDialogWindow: aDialogPresenter
	aDialogPresenter centered.
	aDialogPresenter 
		addButton: 'Cancel' do: [ :presenter | presenter close ];
		addButton: 'Save Film' do: [ :presenter | presenter beOk; close ].
]]]

%@@note how do I get a button that does not suck and cut half the text (because I tried with Save Film in DB)? I do not think that addButton:do: is a good API because we cannot customize anything. 

%ImdbFilmListPresenter1 new openWithSpec
+Customizing the modal dialog.>file://figures/FilmList-05-Modal.png|width=100|label=FilmListPresenter3+

%ImdbFilmListPresenter1 new openWithSpec
+Film list gets refreshed.>file://figures/FilmList-06-ListRefreshed.png|width=60|label=refreshed+




!!! Embedding the film presenter into the film list

We have two main visual element one for a list of films and one for a film details.
We can imagine that we would like to see the film details just in the same
container than the list, especially since a film description should be larger than the list columns. 


Let us proceed. First we add a new instance variable named ==detail== to the class ==ImdbFilmListPresenter==.

[[[language=Smalltalk
SpPresenter subclass: #ImdbFilmListPresenter
	instanceVariableNames: 'filmList detail'
	classVariableNames: ''
	package: 'Spec2-TutorialOne'
]]]

We redefine the default layout. We will show later that we can have different layouts.

[[[language=Smalltalk
ImdbFilmListPresenter class >> defaultLayout 
	^ SpBoxLayout newVertical
			add: #filmList; 
			add: #detail;
			yourself
]]]

We add a little helper method in class ==ImdbFilmPresenter== to be able to pass a film
and populate the presenter accordingly. 

[[[language=Smalltalk
ImdbFilmPresenter >> setModel: aFilm

	nameText text: aFilm name.
	directorText text: aFilm director.
	yearNumber number: aFilm year.
]]]


Now we improve the ==initializePresenters== of ==ImdbFilmListPresenter==.
- First we instantiate ==ImdbFilmPresenter==.
- Second we configure as readonly using the ==enabled: false== message. 
- Third we define that when an element of the list is selected we should display the information in the detail presenter. 

Now executing the code snippet above you get the situation illustrated by Figue *@embedded*.

It is worth to take some time to look at ==whenSelectionChangedDo:== message.
The ==whenSelectionChangedDo:== method expects a block with zero or one argument. Such argument is not the selected item directly but a more complex object representing the selection. Indeed a selection is different in single item selection list and a multiple selection list. Therefore Spec defines the notion of selection mode under the form of subclasses of ==SpAbstractSelectionMode==.

[[[language=Smalltalk
ImdbFilmListPresenter >> initializePresenters

	filmList := self newTable
		addColumn: (SpStringTableColumn title: 'Name' evaluated: #name);
		addColumn: (SpStringTableColumn title: 'Director' evaluated: #director);
		addColumn: (SpStringTableColumn title: 'Year' evaluated: #year);
		yourself.
		
	detail := self instantiate: ImdbFilmPresenter.
	detail enabled: false.
	
	filmList whenSelectionChangedDo: [ :selectedItemMode | 
		selectedItemMode isEmpty ifFalse: [detail setModel: selectedItemMode selectedItem] ].
		
	self updatePresenter
]]]

+Embedding the film description in the list: selecting a list item populates the detailed visual component.>file://figures/FilmList-07-embedded.png|width=60|label=embedded+

!!! Tests
@@note May be we should move this section to a dedicated 

A strong aspect of Spec is the fact that we can write tests about the interaction. 
And tests are so powerful to help us create nice design and make sure that we can spot our errors
that we give you the chance to see that writing tests for UI is not complex. 

We define a subclass of ==TestCase==.

[[[
TestCase subclass: #FilmListPresenterTest
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Spec2-TutorialOne'
]]]



[[[
FilmListPresenterTest >> testSelectingOneFilmDisplaysIt

	| list |
	list := ImdbFilmListPresenter new.
	list openWithSpec.
	detail := list detail.
	self assert: detail nameText text isEmpty. 
	list filmList clickAtIndex: 1.
	self deny: detail nameText text isEmpty. 
]]]

This test is a bit poor because we do not test explicit the value of the name of the film in the detailled component. 
We did this to keep the test set up simple, partly because ==ImdbFilm== stores globally the current films (Remember we told you that singleton are ugly
and they also make testing more complex).

We define three helper methods on ImdbFilm to reset the stored films and add E.T. film.

[[[
ImdbFilm class >> reset 
	films := OrderedCollection new
]]]
[[[
ImdbFilm class >> addET
	films add: self ET
]]]
[[[
ImdbFilm class >> ET

	^ self new 
		name: 'E.T.';
		director: 'Steven Spielberg';
		year: '1982'; 
		yourself
]]]


So let us fix this:

[[[
FilmListPresenterTest >> setUp
	super setUp. 
	ImdbFilm reset. 
	ImdbFilm addET.
]]]


[[[
FilmListPresenterTest >> testSelectingOneFilmDisplaysIt

	| list |
	list := ImdbFilmListPresenter new.
	list openWithSpec.
	detail := list detail.
	self assert: detail nameText text isEmpty. 
	list filmList clickAtIndex: 1.
	self deny: detail nameText text isEmpty. 
]]]



Another point that this test is showing is that the API of ==ImdbFilmPresenter== is not nice because it should offer a way to access the presenter and also its model. Here ==nameText== could be renamed ==namePresenter== and ==nameText== would return the text. 


!!! Adding More Tests
Tests are so much fun and addictive (they are because we can change programs and check that they still works), that we will write another one. 

[[[
FilmListPresenterTest >> testSelectingOneFilmAndClickingOnEmpty

	| list text |
	list := ImdbFilmListPresenter new.
	list openWithSpec.
	list filmList clickAtIndex: 1.
	text := list detail nameText text.
	self deny:  text isEmpty. 
	self assert: list filmList listSize equals: 1.
	list filmList clickAtIndex: 2.
	self assert: list detail nameText text equals: text
]]]


Since we do not really understand what would be to set the list as multiple selection we test it. 

[[[
FilmListPresenterTest >> testListIsSimpleSelection

	| list |
	list := ImdbFilmListPresenter new.
	list openWithSpec.
	self deny: list isMultipleSelection.
]]]

What you see is that it relatively simple to test that the interaction you specified is actually working as expected. 



!!! Changing Layout 

With Spec, a presenter can have multiple layouts and even layouts that are created on the fly as we will see with the dynamic layouts.
We can decide which layout to use to open a presenter. 
Imagine that we prefer to have the list above the film details, or just the list alone.

[[[language=Smalltalk
ImdbFilmListPresenter class >> listAboveLayout 
	^ SpBoxLayout newVertical
			add: #detail;
			add: #filmList; 
			yourself
]]]


The following example shows that we can open ==ImdbFilmListPresenter== with the layout ==embeddedLayout== that we wil define 
hereafter.

[[[language=Smalltalk
| app |
app := ImdbApplication new. 
(app newPresenter: ImdbFilmListPresenter) openWithSpec: #listAboveLayout.
]]]

We can also only layout part of the subpresenters.
Here ==listOnlyLayout== only shows the list.


[[[language=Smalltalk
ImdbFilmListPresenter class >> listOnlyLayout 
	^ SpBoxLayout newVertical
			add: #filmList; 
			yourself
]]]


+A presenter can have multiple layouts for its subpresenters.>file://figures/FilmList-08-embeddedAbove.png|width=60|label=embedded+

	
!!! Using Transmissions

Spec20 introduces a nice concept to propagate selection from one presenter to another, thinking on the "flow" of information more than the implementation details of this propagation, which can change from presenter to presenter.

With transmissions, each presenter can define a set of output ports (ports to transmit information) and input ports (ports to receive information). Widget presenters already have defined the output/input ports you can use with them, but you can add your own ports to your presenters.

The easiest way to declare a transmission is by sending the ==transmitTo:== message from a presenter to another.

[[[language=Smalltalk
ImdbFilmListPresenter >> initializePresenters

	filmList := self newTable
		addColumn: (SpStringTableColumn title: 'Name' evaluated: #name);
		addColumn: (SpStringTableColumn title: 'Director' evaluated: #director);
		addColumn: (SpStringTableColumn title: 'Year' evaluated: #year);
		yourself.
		
	detail := self instantiate: ImdbFilmPresenter.
	detail enabled: false.
	
	"Transmissing from my filmList to a detail"
	filmList transmitTo: detail.
	self updatePresenter
]]]

Here, ==filmList== is a table which will transmit its selection to ==detail== presenter.
It is an instance of ==ImdbFilmPresenter== that we defined, hence it does not define any input port.
Therefore we need to define an input port as follows: 
	
[[[language=Smalltalk
ImdbFilmPresenter >> defaultInputPort

	^ self inputModelPort
]]]

[[[language=Smalltalk
ImdbFilmPresenter >> inputModelPort

	^ SpModelPort newPresenter: self. 
]]]


%%SD: why do we need the two methods?
%% SD: why do we need the setModel: method.

[[[language=Smalltalk
ImdbFilmPresenter >> setModel: aFilm

	nameText text: aFilm name.
	directorText text: aFilm director.
	yearNumber number: aFilm year.
]]]


Use the same component to show a detail or edit a film.

!!! Styling the application
Different elements in an application can have different look and feels, for example to change the size or color of a font for a header. To allow this, Spec introduces the concept of "styles" for components. 

In Spec, one application defines a Stylesheet (or a set of them). 
This defines a set of "style classes" that can be later assigned to presenter widgets. 
Defining a style class, however, work very different for each backend. 
While Gtk will accept (mostly) regular CSS to style your widgets, Morphic has its own sub-framework. 

To define an style, you need to declare an stylesheet in your configuration.

%% SD: why do we need initializePresenters because there is not change?
[[[language=Smalltalk
ImdbFilmPresenter >> initializePresenters 
	self newLabel 
		label: 'Name'; 
		addStyle: 'header'; 
		yourself.
	nameText := self newTextInput autoAccept: true.	
	directorText := self newTextInput autoAccept: true.
	yearNumber := self newNumberInput autoAccept: true;
		rangeMinimum: 1900 maximum: Year current year;
		yourself
]]]

+Embedding the film description in the list.>file://figures/MissingFile.png|width=100|label=FilmListPresenter3+

!!! Using GTK theme and settings

[[[language=Smalltalk
SpGtkConfiguration subclass: #ImdbGtkConfiguration
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Spec2-TutorialOne'
]]]

[[[language=Smalltalk
ImdbGtkConfiguration >> configure: anApplication

	super configure: anApplication.
	"This will choose the theme 'Sierra-dark' if it is available"
	self installTheme: 'Sierra-dark'.
	"This will add a 'provider' (a stylesheet)"
	self addCSSProviderFromString: '.header {color: red; font-weight: bold}'
]]]

[[[language=Smalltalk
ImdbApplication >> initialize
	super initialize.
	self useBackend: #Gtk with ImdbGtkConfiguration new
]]]

!!! Using Morphic

[[[language=Smalltalk
SpMorphicConfiguration subclass: #ImdbMorphicConfiguration
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Spec2-TutorialOne'
]]]

[[[language=Smalltalk
SpMorphicConfiguration >> configure: anApplication

	super configure: anApplication.
	"There are ways to write/read this from strings or files, but this is how you do 
	 it programatically"
	self styleSheet 
		 addClass: 'header' with: [ :style |
		 	style 
				addPropertyFontWith: [ :font | font bold: true ];
				addPropertyDrawWith: [ :draw | draw color: Color red ] ]
]]]

[[[language=Smalltalk
ImdbApplication >> initialize
	super initialize.
	self useBackend: #Morphic with ImdbMorphicConfiguration new
]]]

!!! Conclusion

We saw...
